#!/bin/bash
# vim: set syntax=sh

set -euo pipefail

namespace=

function printUsage() {
    echo "Usage: $(basename $0) [-n <namespace] <command>"
    echo
    echo "command:"
    echo "  alpine:"
    echo "      start a container based on alpine"
    echo "  bash <expression>:"
    echo "      open /bin/bash on the pod matching the given expression"
    echo "  context <context>:"
    echo "      switch kubernetes context"
    echo "  events [--once] [<grep expression>]:"
    echo "      watch events for the given grep expression"
    echo "  logs <pod expression> [<container name>]:"
    echo "      wait until the container is up and then stream the logs for it"
    echo "  monitor [--more]:"
    echo "      watch pods from all namespaces"
    echo "      options:"
    echo "          --more: print extended version"
    echo "  podid <expression>:"
    echo "      prints the pod id of the pod matching the expression"
    echo "  secret [options] <name> <key>:"
    echo "      get a secret and store it in the clipboard"
    echo "      options:"
    echo "          --stdout: pipe secret to stdout"

}

function printError() {
    echo >&2 echo "$1"
}

function failTooFewArguments() {
    printError "Too few arguments for command."
    echo
    printUsage
    exit 1
}

function runAlpine() {
    kubectl ${namespace} run -i --tty --rm debug --image=alpine --restart=Never -- /bin/sh
}

function switchContext() {
    if (( $# < 1 ));
    then
        failTooFewArguments
    fi

    context=$1

    kubectl config use-context $context
}

function getSecret() {
    if (( $# < 1 ));
    then
        failTooFewArguments
    fi

    local finalPipe=" | xclip -i"
    local copyToStdout=0
    if (( $# > 2 ));
    then
        if [[ $1 != "--stdout" ]];
        then
            printError "Illegal argument: $1"
            echo
            printUsage
            exit 1
        else
            copyToStdout=1
            shift
        fi
    fi

    if (( $# < 2 ));
    then
        failTooFewArguments
    fi

    local name=$1
    local key=$2

    local secret=$(kubectl ${namespace} get secret "$name" -o jsonpath --template="{..$key}" | base64 -d)

    if (( $copyToStdout == 0 ));
    then
        echo -n "$secret" | xclip -i
    else
        echo -n "$secret"
    fi
}

function streamLogs() {
    if (( $# < 1 ));
    then
        failTooFewArguments
    fi

    targetPod=$(podId $1)
    targetContainer=
    if (( $# > 1 ));
    then
        targetContainer="-c $2"
    fi

    until kubectl ${namespace} logs ${targetContainer} ${targetPod}
    do
        sleep 10
    done

    echo

    kubectl ${namespace} logs -f ${targetContainer} ${targetPod}
}

function watchEvents() {
    filter=
    watch=1
    if [[ $# -gt 0 && "$1" == "--once" ]];
    then
        watch=0
        shift
    fi

    if (( $# > 0 ));
    then
        filter="| grep $@"
    fi

    command="kubectl ${namespace} get events --sort-by '.metadata.creationTimestamp' ${filter}"

    if (( ${watch} == 0 ));
    then
        eval ${command}
    else
        watch -d "${command}"
    fi
}

function podId() {
    if (( $# < 1 ));
    then
        failTooFewArguments
    fi

    kubectl ${namespace} get pods | grep -m 1 "$1" | awk '{print $1}'
}

function launchBash() {
    if (( $# < 1 ));
    then
        failTooFewArguments
    fi

    local podId=$(podId $1)
    kubectl ${namespace} exec -it $podId -- /bin/bash
}

function monitorPods() {
    local flags=
    if [[ $# > 0 && "$1" == "--more" ]];
    then
        flags='-o wide'
    fi

    if [[ -z "${namespace}" ]];
    then
        namespace="-A"
    fi

    watch -d "kubectl get pods ${flags} ${namespace} "
}

if (( $# < 1 ));
then
    failTooFewArguments
    exit 1
fi

while (( $# > 0 ));
do
    case "$1" in
    -h|--help)
        printUsage
        exit 0
        ;;
    -n)
        shift
        namespace="-n $1"
        shift
        ;;
    alpine)
        shift
        runAlpine
        exit 0
        ;;
    context)
        shift
        switchContext "$@"
        exit 0
        ;;
    secret)
        shift
        getSecret "$@"
        exit 0
        ;;
    logs)
        shift
        streamLogs "$@"
        exit 0
        ;;
    events)
        shift
        watchEvents "$@"
        exit 0
        ;;
    podid)
        shift
        podId "$@"
        exit 0
        ;;
    bash)
        shift
        launchBash "$@"
        exit 0
        ;;
    monitor)
        shift
        monitorPods "$@"
        exit 0
        ;;
    *)
        printError "Unknown argument: $1"
        printUsage
        exit 1
        ;;
    esac
done
