#!/bin/bash
# vim: set syntax=sh

set -euo pipefail

function printUsage() {
    echo "Usage: $(basename $0) <command>"
    echo
    echo "command:"
    echo "  context <context> <mfa token> [<role>]:"
    echo "      switch kubernetes context"
    echo "  secret [options] <name> <key>:"
    echo "      get a secret and store it in the clipboard"
    echo "      options:"
    echo "          --stdout: pipe secret to stdout"
    echo "  logs <selector>:"
    echo "      wait until the container is up and then stream the logs for it"
    echo "  events <grep expression>:"
    echo "      watch events for the given grep expression"
    echo "  podid <expression>:"
    echo "      prints the pod id of the pod matching the expression"
    echo "  bash <expression>:"
    echo "      open /bin/bash on the pod matching the given expression"
}

function printError() {
    echo >&2 echo "$1"
}

function failTooFewArguments() {
    printError "Too few arguments for command."
    echo
    printUsage
    exit 1
}

function switchContext() {
    if (( $# < 2 ));
    then
        failTooFewArguments
    fi

    context=$1
    mfa_token=$2
    role=${3:-such_developer}

    source aws-get-session $context $mfa_token $role
    kubectl config use-context $context
}

function getSecret() {
    if (( $# < 1 ));
    then
        failTooFewArguments
    fi

    local finalPipe=" | xclip -i"
    local copyToStdout=0
    if (( $# > 2 ));
    then
        if [[ $1 != "--stdout" ]];
        then
            printError "Illegal argument: $1"
            echo
            printUsage
            exit 1
        else
            copyToStdout=1
            shift
        fi
    fi

    if (( $# < 2 ));
    then
        failTooFewArguments
    fi

    local name=$1
    local key=$2

    local secret=$(kubectl get secret "$name" -o jsonpath --template="{..$key}" | base64 -d)

    if (( $copyToStdout == 0 ));
    then
        echo -n "$secret" | xclip -i
    else
        echo -n "$secret"
    fi
}

function streamLogs() {
    if (( $# < 1 ));
    then
        failTooFewArguments
    fi

    until kubectl logs $@
    do
        sleep 10
    done

    echo

    kubectl logs -f $@
}

function watchEvents() {
    if (( $# < 1 ));
    then
        failTooFewArguments
    fi

    watch -d "kubectl get events | grep $@"
}

function podId() {
    if (( $# < 1 ));
    then
        failTooFewArguments
    fi

    kubectl get pods | grep -m 1 "$1" | awk '{print $1}'
}

function launchBash() {
    if (( $# < 1 ));
    then
        failTooFewArguments
    fi

    local podId=$(podId $1)
    kubectl exec -it $podId /bin/bash
}

if (( $# < 1 ));
then
    failTooFewArguments
    exit 1
fi

case "$1" in
-h|--help)
    printUsage
    exit 0
    ;;
context)
    shift
    switchContext "$@"
    ;;
secret)
    shift
    getSecret "$@"
    ;;
logs)
    shift
    streamLogs "$@"
    ;;
events)
    shift
    watchEvents "$@"
    ;;
podid)
    shift
    podId "$@"
    ;;
bash)
    shift
    launchBash "$@"
    ;;
*)
    printError "Unknown argument: $1"
    printUsage
    exit 1
    ;;
esac
