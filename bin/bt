#!/bin/bash
# vim: set syntax bash

set -euo pipefail
#set -x

declare -A devices=(
    ["edifier"]="40:EF:4C:C3:AB:3F"
    ["jbl"]="28:FA:19:48:E3:47"
    ["p3"]="E8:EE:CC:5B:01:E2"
    ["x3"]="88:C6:26:DD:70:B5"
)

scriptName=$(basename $0)
bluetoothProfile='a2dp_sink'

function usageAndExit {
    echo "Usage: $scriptName <command> <name>"
    echo
    echo "Command:"
    echo "  help: display this message and exit"
    echo "  connect: connect and mount"
    echo "  disconnect: unmount and disconnect"
    echo "  isconnected: check if the device is connected"
    echo "  isactive: check if the device is activated in software"

    exit $1
}

function connect {
    local mac="${devices[$1]}"

    while true
    do
        # connect
        echo "Connecting device ..."
        echo -e "power on\nconnect $mac\nquit" | bluetoothctl

        # wait until device is connected
        echo -n "Waiting until device is connected ..."
        local tryCount=0
        while [[ $(isConnected $1) -ne 0 && ${tryCount} -lt 5 ]];
        do
            ((tryCount+=1))
            echo -n "."
            sleep 1
        done
        echo

        if [[ $(isConnected $1) -eq 0 ]];
        then
            echo "Device is connected. Waiting until it's active ..."
            local tryCount=0
            while [[ $(isActive $1) -ne 0 && ${tryCount} -lt 5 ]];
            do
                sleep 1
                ((tryCount+=1))
            done

            if [ $(isActive $1) -eq 0 ];
            then
                echo "Device active."
                break
            else
                echo "Device can't be activated. Trying to reconnect."
                disconnect $1
            fi
        else
            echo "Can't connect. Trying to reconnect."
        fi
    done
}

function disconnect {
    local mac="${devices[$1]}"

    while true
    do
        echo -e "disconnect $mac" | bluetoothctl

        # wait until device is connected
        local tryCount=0
        while [ $(isConnected $1) -eq 0 -a $tryCount -lt 5 ];
        do
            sleep 1
            ((tryCount+=1))
        done

        if [ $(isConnected $1) -ne 0 ];
        then
            return 0
        fi
    done
}

function mount {
    mkdir -p $targetDir
    obexfs -b $motoMac $targetDir
}

function unmount {
    fusermount -u $targetDir
    rmdir $targetDir
}

function isConnected {
    local mac="${devices[$1]}"
    (set +o pipefail; echo -e "info $mac" | bluetoothctl | grep "Connected: yes" > /dev/null)
    echo $?
}

function isActive {
    if [ "$1" == "x3" ];
    then
        pactl list cards | grep -i "active profile: $bluetoothProfile" > /dev/null
        echo $?
    else
        echo 0
    fi
}

function activateDefaultSink {
    local name="bluez_sink."$(sed 's/:/_/g' <<< "${devices[$1]}")".$bluetoothProfile"
    echo "name: $name"
    pactl set-default-sink "$name"
}

if [ "$#" -eq 0 ];
then
    usageAndExit 1
fi

while [ "$#" -gt 0 ];
do
    case "$1" in
    help)
        usageAndExit 0
        ;;
    connect)
        shift
        if [ "$#" -lt 1 ];
        then
            usageAndExit 1
        fi

        # we will make sure the computer is disconnected from the device
        # else there's some weirdness that it can't use high-quality output/input
        disconnect $1
        connect $1
        ;;
    disconnect)
        shift
        if [ "$#" -lt 1 ];
        then
            usageAndExit 1
        fi

        disconnect $1
        ;;
    isconnected)
        shift
        if [ "$#" -lt 1 ];
        then
            usageAndExit 1
        fi

        isConnected $1
        ;;
    isactive)
        shift
        if [ "$#" -lt 1 ];
        then
            usageAndExit 1
        fi

        isActive $1
        ;;
    *)
        usageAndExit 1
        ;;
    esac
    shift
done
