# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# -----------------------------------------------------------------------------
# --- Shell ---

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=
HISTFILESIZE=

# vim as default editor
EDITOR=vim

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# enable vi mode
set -o vi

# load the variable __git_ps1 for usage in PS1 below
source ~/.git-prompt.sh

# disable a beep for tab-completion
set bell-style none

# -----------------------------------------------------------------------------
# --- PS1

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='\[\e[0;32m\]\u\[\e[m\]:\[\e[0;34m\]\w\[\e[m\]\[\e[0;33m\]$(__git_ps1 " (%s)")\n\$\[\e[m\] '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\n\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    #PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    PS1="\[\e]0;\w\a\]$PS1"
    ;;
*)
    ;;
esac

# -----------------------------------------------------------------------------
# --- Completion ---

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# -----------------------------------------------------------------------------
# --- Aliases ---

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'

    alias grep='grep --color=auto'
fi

alias ll='ls -alhF'
alias la='ls -A'
alias ..='cd ..'

alias tl='tar --exclude="*/*/*" -tf'

alias v='vim -c "NERDTree | wincmd w"'
alias vd='gvim +Gvdiff'

alias gs='git status'
alias gg='git gui&'
alias gk='gitk --all&'

alias pms='pacman -Ss'
alias pmi='sudo pacman -S'

# grep: case-insensitive, ignore binaries, print filename, recursive, print line numbers
alias gr='grep -iIsrn'

# -----------------------------------------------------------------------------
# --- Functions ---
setTitle()
{
    ORIG=$PS1
    TITLE="\e]2;$*\a"
    PS1=${ORIG}${TITLE}
}

# -----------------------------------------------------------------------------
# --- screen ---

# Auto-screen invocation. see: http://taint.org/wk/RemoteLoginAutoScreen
# if we're coming from a remote SSH connection, in an interactive session
# then automatically put us into a screen(1) session.   Only try once
# -- if $STARTED_SCREEN is set, don't try it again, to avoid looping
# if screen fails for some reason.
if [ "$PS1" != "" -a "${STARTED_SCREEN:-x}" = x -a "${SSH_TTY:-x}" != x ]
then
  STARTED_SCREEN=1 ; export STARTED_SCREEN
  sleep 1
  screen -RR && exit 0
  # normally, execution of this rc script ends here...
  echo "Screen failed! continuing with normal bash startup"
fi
# [end of auto-screen snippet]

# -----------------------------------------------------------------------------
# --- paths ---

export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64
export PATH=$PATH:~/bin

export JAVA_HOME=$(readlink -f /usr/bin/java | sed 's:/bin/java::')

# -----------------------------------------------------------------------------
# --- Google Cloud ---

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/home/bobbel/local/google-cloud-sdk/path.bash.inc' ]; then source '/home/bobbel/local/google-cloud-sdk/path.bash.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/home/bobbel/local/google-cloud-sdk/completion.bash.inc' ]; then source '/home/bobbel/local/google-cloud-sdk/completion.bash.inc'; fi

# -----------------------------------------------------------------------------
# --- SSH Agent ---

if ! pgrep -u "$USER" ssh-agent > /dev/null; then
    ssh-agent > ~/.ssh-agent-thing
fi
if [[ "$SSH_AGENT_PID" == "" ]]; then
    eval "$(<~/.ssh-agent-thing)" > /dev/null
fi

